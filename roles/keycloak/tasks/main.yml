- name: Stopper le conteneur s'il tourne
  command: docker compose down
  args:
    chdir: "{{ keycloak_dir }}"
  ignore_errors: true

- name: Créer le répertoire keycloak
  file:
    path: "{{ keycloak_dir }}"
    state: directory
    mode: '0755'

- name: Copier le fichier docker-compose
  template:
    src: docker-compose.yml.j2
    dest: "{{ keycloak_dir }}/docker-compose.yml"
    mode: '0644'

- name: Lancer docker compose en arrière-plan
  command: docker compose up -d
  args:
    chdir: "{{ keycloak_dir }}"

- name: Attendre que Keycloak soit accessible sur le port 8080
  wait_for:
    host: 127.0.0.1
    port: 8080
    delay: 10
    timeout: 60

- name: Attendre que Keycloak soit complètement prêt (login kcadm.sh possible)
  shell: |
    docker exec keycloak /opt/keycloak/bin/kcadm.sh config credentials \
      --server http://localhost:8080 \
      --realm master \
      --user admin \
      --password admin
  register: kcadm_login
  retries: 15
  delay: 5
  until: kcadm_login.rc == 0

- name: Désactiver SSL pour le realm master via kcadm.sh
  shell: |
    docker exec keycloak /opt/keycloak/bin/kcadm.sh update realms/master -s sslRequired=EXTERNAL
  register: update_ssl
  changed_when: "'sslRequired' in update_ssl.stdout or update_ssl.stderr == ''"

- name: Récupérer l'ID du client Grafana
  shell: >
    docker exec {{ keycloak_container }} /opt/keycloak/bin/kcadm.sh get clients -r {{ realm }} |
    jq -r '.[] | select(.clientId=="{{ client_id }}") | .id'
  register: client_id_keycloak
  failed_when: false
  changed_when: false

- name: Mettre à jour le client Grafana existant
  shell: |
    echo '{
      "clientId": "{{ client_id }}",
      "enabled": true,
      "protocol": "openid-connect",
      "clientAuthenticatorType": "client-secret",
      "secret": "{{ client_secret }}",
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": true,
      "publicClient": false,
      "rootUrl": "{{ grafana_root_url }}",
      "baseUrl": "{{ grafana_root_url }}",
      "adminUrl": "{{ grafana_root_url }}",
      "redirectUris": ["{{ grafana_root_url }}/login/generic_oauth"],
      "webOrigins": ["{{ grafana_root_url }}"]
    }' | docker exec -i {{ keycloak_container }} /opt/keycloak/bin/kcadm.sh update clients/{{ client_id_keycloak.stdout }} -r {{ realm }} -f -
  when: client_id_keycloak.stdout != ""

- name: Créer le client Grafana s'il n'existe pas
  shell: |
    echo '{
      "clientId": "{{ client_id }}",
      "enabled": true,
      "protocol": "openid-connect",
      "clientAuthenticatorType": "client-secret",
      "secret": "{{ client_secret }}",
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": true,
      "publicClient": false,
      "rootUrl": "{{ grafana_root_url }}",
      "baseUrl": "{{ grafana_root_url }}",
      "adminUrl": "{{ grafana_root_url }}",
      "redirectUris": ["{{ grafana_root_url }}/login/generic_oauth"],
      "webOrigins": ["{{ grafana_root_url }}"]
    }' | docker exec -i {{ keycloak_container }} /opt/keycloak/bin/kcadm.sh create clients -r {{ realm }} -f -
  when: client_id_keycloak.stdout == ""

- name: Récupérer l'ID du client GitLab
  shell: >
    docker exec {{ keycloak_container }} /opt/keycloak/bin/kcadm.sh get clients -r {{ realm }} |
    jq -r '.[] | select(.clientId=="{{ gitlab_client_id }}") | .id'
  register: gitlab_client_id_keycloak
  failed_when: false
  changed_when: false

- name: Créer ou mettre à jour le client GitLab dans Keycloak
  shell: |
    echo '{
      "clientId": "{{ gitlab_client_id }}",
      "enabled": true,
      "protocol": "openid-connect",
      "clientAuthenticatorType": "client-secret",
      "secret": "{{ gitlab_client_secret }}",
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": true,
      "publicClient": false,
      "redirectUris": ["{{ grafana_root_url }}/users/auth/openid_connect/callback"],
      "webOrigins": ["{{ grafana_root_url }}"],
      "baseUrl": "{{ grafana_root_url }}",
      "rootUrl": "{{ grafana_root_url }}"
    }' | docker exec -i {{ keycloak_container }} /opt/keycloak/bin/kcadm.sh {{ 'update clients/' + gitlab_client_id_keycloak.stdout if gitlab_client_id_keycloak.stdout else 'create clients' }} -r {{ realm }} -f -